name: CI/CD using github actions & docker

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      # 1. 리포지토리 코드 체크아웃
      - uses: actions/checkout@v3

      # 2. JDK 17 세팅 (빌드를 위해)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle Caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. application.yml 파일 생성
      - name: make application.yml
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch application.yml
          echo "${{ secrets.YML }}" > application.yml
        shell: bash

      # 5. Gradle 빌드 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 6. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 7. Set up QEMU for multi-platform
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      # 8. Docker 로그인
      - name: Docker Login
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      # 9. Docker 이미지 빌드 & 푸시 (multi-platform)
      - name: Docker build & push
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --push \
            -t ${{ secrets.DOCKER_USERNAME }}/with-suhyeon .

      # 10. 원격 서버 배포
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sudo docker ps -q --filter "ancestor=${{ secrets.DOCKER_USERNAME }}/with-suhyeon" | xargs -r sudo docker stop
            sudo docker ps -aq --filter "ancestor=${{ secrets.DOCKER_USERNAME }}/with-suhyeon" | xargs -r sudo docker rm
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/with-suhyeon
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/with-suhyeon
            sudo docker image prune -f
